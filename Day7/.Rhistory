sum_unmarked = sum([marked_boards[j][l] for l, x in enumerate(marked_boards[j]) if x != "x"])
return sum_unmarked
return 0
for i in range(len(draw_numbers)):
for j in range(len(marked_boards)):
if draw_numbers[i] in marked_boards[j]:
marked_boards[j][marked_boards[j].index(draw_numbers[i])] = "x"
if i >= 5:
if check_bingo(marked_boards) > 0:
print(check_bingo(marked_boards) * draw_numbers[i])
break
from copy import deepcopy
file = open("Day4Input.txt", "r")
lines = file.readlines()
draw_numbers = []
board_number = -1
boards = []
for i in range(len(lines)):
if i == 0:
draw_numbers = lines[i].split(",")
for j in range(len(draw_numbers)):
draw_numbers[j] = int(draw_numbers[j])
elif i % 6 == 1:
board_number = board_number + 1
boards.append([])
elif i % 6 != 1:
boards[board_number].append(lines[i])
file.close()
for i in range(len(boards)):
full_board = ""
for j in range(len(boards[i])):
full_board = full_board + boards[i][j]
boards[i] = full_board.split()
for j in range(len(boards[i])):
boards[i][j] = int(boards[i][j])
marked_boards = deepcopy(boards)
def check_bingo(marked_boards, bingo_boards):
new_bingo_boards = []
for j in range(len(marked_boards)):
if j not in bingo_boards:
for k in [0, 5, 10, 15, 20]:
row = marked_boards[j][k:(k + 5)]
if row.count("x") == 5:
sum_unmarked = sum([marked_boards[j][l] for l, x in enumerate(marked_boards[j]) if x != "x"])
new_bingo_boards.append(j)
print(j, sum_unmarked)
for k in [0, 1, 2, 3, 4]:
indices = [k, k + 5, k + 10, k + 15, k + 20]
column = [marked_boards[j][l] for l in indices]
if column.count("x") == 5:
sum_unmarked = sum([marked_boards[j][l] for l, x in enumerate(marked_boards[j]) if x != "x"])
new_bingo_boards.append(j)
print(j, sum_unmarked)
return set(new_bingo_boards)
bingo_boards = []
for i in range(len(draw_numbers)):
for j in range(len(marked_boards)):
if j not in bingo_boards:
if draw_numbers[i] in marked_boards[j]:
marked_boards[j][marked_boards[j].index(draw_numbers[i])] = "x"
if i >= 5:
new_bingo_boards = check_bingo(marked_boards, bingo_boards)
if len(new_bingo_boards) > 0:
for new in new_bingo_boards:
bingo_boards.append(new)
if len(bingo_boards) == len(marked_boards):
print(draw_numbers[i])
break
29*361
from copy import deepcopy
file = open("Day4Input.txt", "r")
lines = file.readlines()
draw_numbers = []
board_number = -1
boards = []
for i in range(len(lines)):
if i == 0:
draw_numbers = lines[i].split(",")
for j in range(len(draw_numbers)):
draw_numbers[j] = int(draw_numbers[j])
elif i % 6 == 1:
board_number = board_number + 1
boards.append([])
elif i % 6 != 1:
boards[board_number].append(lines[i])
file.close()
for i in range(len(boards)):
full_board = ""
for j in range(len(boards[i])):
full_board = full_board + boards[i][j]
boards[i] = full_board.split()
for j in range(len(boards[i])):
boards[i][j] = int(boards[i][j])
marked_boards = deepcopy(boards)
def check_bingo(marked_boards, bingo_boards):
new_bingo_boards = []
for j in range(len(marked_boards)):
if j not in bingo_boards:
for k in [0, 5, 10, 15, 20]:
row = marked_boards[j][k:(k + 5)]
if row.count("x") == 5:
sum_unmarked = sum([marked_boards[j][l] for l, x in enumerate(marked_boards[j]) if x != "x"])
new_bingo_boards.append(j)
#print(j, sum_unmarked)
for k in [0, 1, 2, 3, 4]:
indices = [k, k + 5, k + 10, k + 15, k + 20]
column = [marked_boards[j][l] for l in indices]
if column.count("x") == 5:
sum_unmarked = sum([marked_boards[j][l] for l, x in enumerate(marked_boards[j]) if x != "x"])
new_bingo_boards.append(j)
#print(j, sum_unmarked)
return set(new_bingo_boards)
bingo_boards = []
for i in range(len(draw_numbers)):
for j in range(len(marked_boards)):
if j not in bingo_boards:
if draw_numbers[i] in marked_boards[j]:
marked_boards[j][marked_boards[j].index(draw_numbers[i])] = "x"
if i >= 5:
new_bingo_boards = check_bingo(marked_boards, bingo_boards)
if len(new_bingo_boards) > 0:
for new in new_bingo_boards:
bingo_boards.append(new)
if len(bingo_boards) == len(marked_boards):
print(draw_numbers[i])
break
from copy import deepcopy
file = open("Day4Input.txt", "r")
lines = file.readlines()
draw_numbers = []
board_number = -1
boards = []
for i in range(len(lines)):
if i == 0:
draw_numbers = lines[i].split(",")
for j in range(len(draw_numbers)):
draw_numbers[j] = int(draw_numbers[j])
elif i % 6 == 1:
board_number = board_number + 1
boards.append([])
elif i % 6 != 1:
boards[board_number].append(lines[i])
file.close()
for i in range(len(boards)):
full_board = ""
for j in range(len(boards[i])):
full_board = full_board + boards[i][j]
boards[i] = full_board.split()
for j in range(len(boards[i])):
boards[i][j] = int(boards[i][j])
marked_boards = deepcopy(boards)
def check_bingo(marked_boards, bingo_boards):
new_bingo_boards = []
for j in range(len(marked_boards)):
if j not in bingo_boards:
for k in [0, 5, 10, 15, 20]:
row = marked_boards[j][k:(k + 5)]
if row.count("x") == 5:
sum_unmarked = sum([marked_boards[j][l] for l, x in enumerate(marked_boards[j]) if x != "x"])
new_bingo_boards.append(j)
print(j, sum_unmarked)
for k in [0, 1, 2, 3, 4]:
indices = [k, k + 5, k + 10, k + 15, k + 20]
column = [marked_boards[j][l] for l in indices]
if column.count("x") == 5:
sum_unmarked = sum([marked_boards[j][l] for l, x in enumerate(marked_boards[j]) if x != "x"])
new_bingo_boards.append(j)
print(j, sum_unmarked)
return set(new_bingo_boards)
bingo_boards = []
for i in range(len(draw_numbers)):
for j in range(len(marked_boards)):
if j not in bingo_boards:
if draw_numbers[i] in marked_boards[j]:
marked_boards[j][marked_boards[j].index(draw_numbers[i])] = "x"
if i >= 5:
new_bingo_boards = check_bingo(marked_boards, bingo_boards)
if len(new_bingo_boards) > 0:
for new in new_bingo_boards:
bingo_boards.append(new)
if len(bingo_boards) == len(marked_boards):
print(draw_numbers[i])
break
from copy import deepcopy
file = open("Day4Input.txt", "r")
lines = file.readlines()
draw_numbers = []
board_number = -1
boards = []
for i in range(len(lines)):
if i == 0:
draw_numbers = lines[i].split(",")
for j in range(len(draw_numbers)):
draw_numbers[j] = int(draw_numbers[j])
elif i % 6 == 1:
board_number = board_number + 1
boards.append([])
elif i % 6 != 1:
boards[board_number].append(lines[i])
file.close()
for i in range(len(boards)):
full_board = ""
for j in range(len(boards[i])):
full_board = full_board + boards[i][j]
boards[i] = full_board.split()
for j in range(len(boards[i])):
boards[i][j] = int(boards[i][j])
marked_boards = deepcopy(boards)
scores = []
def check_bingo(marked_boards, bingo_boards):
new_bingo_boards = []
for j in range(len(marked_boards)):
if j not in bingo_boards:
for k in [0, 5, 10, 15, 20]:
row = marked_boards[j][k:(k + 5)]
if row.count("x") == 5:
sum_unmarked = sum([marked_boards[j][l] for l, x in enumerate(marked_boards[j]) if x != "x"])
new_bingo_boards.append(j)
scores.append(sum_unmarked)
for k in [0, 1, 2, 3, 4]:
indices = [k, k + 5, k + 10, k + 15, k + 20]
column = [marked_boards[j][l] for l in indices]
if column.count("x") == 5:
sum_unmarked = sum([marked_boards[j][l] for l, x in enumerate(marked_boards[j]) if x != "x"])
new_bingo_boards.append(j)
scores.append(sum_unmarked)
return set(new_bingo_boards)
bingo_boards = []
for i in range(len(draw_numbers)):
for j in range(len(marked_boards)):
if j not in bingo_boards:
if draw_numbers[i] in marked_boards[j]:
marked_boards[j][marked_boards[j].index(draw_numbers[i])] = "x"
if i >= 5:
new_bingo_boards = check_bingo(marked_boards, bingo_boards)
if len(new_bingo_boards) > 0:
for new in new_bingo_boards:
bingo_boards.append(new)
if len(bingo_boards) == len(marked_boards):
print(draw_numbers[i] * scores[-1])
break
from copy import deepcopy
file = open("Day4Input.txt", "r")
lines = file.readlines()
draw_numbers = []
board_number = -1
boards = []
for i in range(len(lines)):
if i == 0:
draw_numbers = lines[i].split(",")
for j in range(len(draw_numbers)):
draw_numbers[j] = int(draw_numbers[j])
elif i % 6 == 1:
board_number = board_number + 1
boards.append([])
elif i % 6 != 1:
boards[board_number].append(lines[i])
file.close()
for i in range(len(boards)):
full_board = ""
for j in range(len(boards[i])):
full_board = full_board + boards[i][j]
boards[i] = full_board.split()
for j in range(len(boards[i])):
boards[i][j] = int(boards[i][j])
marked_boards = deepcopy(boards)
def check_bingo(marked_boards):
for j in range(len(marked_boards)):
for k in [0, 5, 10, 15, 20]:
row = marked_boards[j][k:(k + 5)]
if row.count("x") == 5:
sum_unmarked = sum([marked_boards[j][l] for l, x in enumerate(marked_boards[j]) if x != "x"])
return sum_unmarked
for k in [0, 1, 2, 3, 4]:
indices = [k, k + 5, k + 10, k + 15, k + 20]
column = [marked_boards[j][l] for l in indices]
if column.count("x") == 5:
sum_unmarked = sum([marked_boards[j][l] for l, x in enumerate(marked_boards[j]) if x != "x"])
return sum_unmarked
return 0
for i in range(len(draw_numbers)):
for j in range(len(marked_boards)):
if draw_numbers[i] in marked_boards[j]:
marked_boards[j][marked_boards[j].index(draw_numbers[i])] = "x"
if i >= 5:
if check_bingo(marked_boards) > 0:
print(check_bingo(marked_boards) * draw_numbers[i])
break
from collections import Counter
import numpy as np
file = open("Day5Input.txt", "r")
lines = file.readlines()
vents = []
for i in range(len(lines)):
points = lines[i].split(" -> ")
start = points[0].split(",")
start_x = int(start[0])
start_y = int(start[1])
end = points[1].split(",")
end_x = int(end[0])
end_y = int(end[1])
if start_x == end_x:
vents.append((start_x, start_y))
vents.append((end_x, end_y))
if start_y == end_y:
pass
elif start_y > end_y:
for y in range(end_y + 1, start_y):
vents.append((start_x, y))
elif start_y < end_y:
for y in range(start_y + 1, end_y):
vents.append((start_x, y))
elif start_y == end_y:
vents.append((start_x, start_y))
vents.append((end_x, end_y))
if start_x == end_x:
pass
elif start_x > end_x:
for x in range(end_x + 1, start_x):
vents.append((x, start_y))
elif start_x < end_x:
for x in range(start_x + 1, end_x):
vents.append((x, start_y))
file.close()
counts = np.asarray(list(Counter(vents).values()))
print(len((counts[counts > 1])))
quit
setwd("C:/Users/lesch/Dropbox/School 2021-2022 (SLU)/Fall 2021/AdventOfCode/AdventOfCode2021/Day5")
reticulate::repl_python()
from collections import Counter
import numpy as np
file = open("Day5Input.txt", "r")
lines = file.readlines()
vents = []
for i in range(len(lines)):
points = lines[i].split(" -> ")
start = points[0].split(",")
start_x = int(start[0])
start_y = int(start[1])
end = points[1].split(",")
end_x = int(end[0])
end_y = int(end[1])
if start_x == end_x:
vents.append((start_x, start_y))
vents.append((end_x, end_y))
if start_y == end_y:
pass
elif start_y > end_y:
for y in range(end_y + 1, start_y):
vents.append((start_x, y))
elif start_y < end_y:
for y in range(start_y + 1, end_y):
vents.append((start_x, y))
elif start_y == end_y:
vents.append((start_x, start_y))
vents.append((end_x, end_y))
if start_x == end_x:
pass
elif start_x > end_x:
for x in range(end_x + 1, start_x):
vents.append((x, start_y))
elif start_x < end_x:
for x in range(start_x + 1, end_x):
vents.append((x, start_y))
file.close()
counts = np.asarray(list(Counter(vents).values()))
print(len((counts[counts > 1])))
from collections import Counter
import numpy as np
file = open("Day5Input.txt", "r")
lines = file.readlines()
vents = []
for i in range(len(lines)):
points = lines[i].split(" -> ")
start = points[0].split(",")
start_x = int(start[0])
start_y = int(start[1])
end = points[1].split(",")
end_x = int(end[0])
end_y = int(end[1])
if start_x == end_x:
vents.append((start_x, start_y))
vents.append((end_x, end_y))
if start_y == end_y:
pass
elif start_y > end_y:
for y in range(end_y + 1, start_y):
vents.append((start_x, y))
elif start_y < end_y:
for y in range(start_y + 1, end_y):
vents.append((start_x, y))
elif start_y == end_y:
vents.append((start_x, start_y))
vents.append((end_x, end_y))
if start_x > end_x:
for x in range(end_x + 1, start_x):
vents.append((x, start_y))
elif start_x < end_x:
for x in range(start_x + 1, end_x):
vents.append((x, start_y))
else:
vents.append((start_x, start_y))
vents.append((end_x, end_y))
if start_x > end_x:
if start_y > end_y:
for i in range(1, start_y - end_y):
vents.append((start_x - i, start_y - i))
elif start_y < end_y:
for i in range(1, end_y - start_y):
vents.append((start_x - i, start_y + i))
elif start_x < end_x:
if start_y > end_y:
for i in range(1, start_y - end_y):
vents.append((start_x + i, start_y - i))
elif start_y < end_y:
for i in range(1, end_y - start_y):
vents.append((start_x + i, start_y + i))
file.close()
counts = np.asarray(list(Counter(vents).values()))
print(len((counts[counts > 1])))
quit
setwd("C:/Users/lesch/Dropbox/School 2021-2022 (SLU)/Fall 2021/AdventOfCode/AdventOfCode2021/Day6")
reticulate::repl_python()
file = open("Day6Input.txt")
line = file.readlines()[0]
file.close()
ages = line.split(",")
for i in range(len(ages)):
ages[i] = int(ages[i])
for i in range(1, 81):
for j in range(len(ages)):
if ages[j] > 0:
ages[j] = ages[j] - 1
elif ages[j] == 0:
ages[j] = 6
ages.append(8)
print(len(ages))
quit
library(csvread)
ages <- read.csv("Day6Input.txt", header = FALSE)
ages <- as.numeric(t(ages))
for (i in 1:128) {
add <- rep(8, sum(ages == 0))
ages <- ifelse(ages == 0, 6, ages - 1)
ages <- c(ages, add)
}
unique_ages <- sort(unique(as.numeric(ages)))
num_fish <- sapply(unique_ages, function(x) {
x <- c(x)
for (i in 1:128) {
add <- rep(8, sum(x == 0))
x <- ifelse(x == 0, 6, x - 1)
x <- c(x, add)
}
return(length(x))
})
table_ages <- as.numeric(as.matrix(table(ages)))
table_ages <- as.numeric(table_ages)
num_fish <- as.numeric(num_fish)
as.int64(sum(as.int64(num_fish * table_ages))) # sum these values
library(csvread)
ages <- read.csv("Day6Input.txt", header = FALSE)
ages <- as.numeric(t(ages))
for (i in 1:128) {
add <- rep(8, sum(ages == 0))
ages <- ifelse(ages == 0, 6, ages - 1)
ages <- c(ages, add)
}
unique_ages <- sort(unique(as.numeric(ages)))
num_fish <- sapply(unique_ages, function(x) {
x <- c(x)
for (i in 1:128) {
add <- rep(8, sum(x == 0))
x <- ifelse(x == 0, 6, x - 1)
x <- c(x, add)
}
return(length(x))
})
table_ages <- as.numeric(as.matrix(table(ages)))
table_ages <- as.numeric(table_ages)
num_fish <- as.numeric(num_fish)
as.int64(num_fish * table_age) # sum these values
library(csvread)
ages <- read.csv("Day6Input.txt", header = FALSE)
ages <- as.numeric(t(ages))
for (i in 1:128) {
add <- rep(8, sum(ages == 0))
ages <- ifelse(ages == 0, 6, ages - 1)
ages <- c(ages, add)
}
unique_ages <- sort(unique(as.numeric(ages)))
num_fish <- sapply(unique_ages, function(x) {
x <- c(x)
for (i in 1:128) {
add <- rep(8, sum(x == 0))
x <- ifelse(x == 0, 6, x - 1)
x <- c(x, add)
}
return(length(x))
})
table_ages <- as.numeric(as.matrix(table(ages)))
table_ages <- as.numeric(table_ages)
num_fish <- as.numeric(num_fish)
as.int64(num_fish * table_ages) # sum these values
setwd("C:/Users/lesch/Dropbox/School 2021-2022 (SLU)/Fall 2021/AdventOfCode/AdventOfCode2021/Day7")
positions <- as.vector(read.csv("Day7Input.txt", header = FALSE)[1,])
total_fuel <- sapply(min(positions):max(positions), function(x) {
total_fuel <- abs(positions - x)
total_fuel <- sum(total_fuel * (total_fuel + 1) / 2)
return(total_fuel)
})
print(min(total_fuel))
