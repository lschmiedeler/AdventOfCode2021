}
}
}
}
print(find_basin(2))
find_basin <- function(point, points = c(), basin = 0) {
print(paste0("point = ", point))
points <- c(points, point)
basin <- basin + 1
print(basin)
to_points <- filter(adjacent_df, from == point)$to
for (i in 1:length(to_points)) {
to_point <- to_points[i]
height <- input_vector[to_point]
if (!(to_point %in% points)) {
if (height == 9) {
print(basin)
return(basin)
}
else {
print(basin)
basin <- basin + find_basin(to_point, points, basin)
}
}
}
}
print(find_basin(2))
find_basin <- function(point, points = c(), basin = 0) {
print(paste0("point = ", point))
points <- c(points, point)
basin <- basin + 1
to_points <- filter(adjacent_df, from == point)$to
for (i in 1:length(to_points)) {
to_point <- to_points[i]
height <- input_vector[to_point]
if (!(to_point %in% points)) {
if (height == 9) {
print(basin)
return(basin)
}
else {
print(basin)
basin <- basin + find_basin(to_point, points, basin)
}
}
}
}
print(find_basin(2))
find_basin <- function(point, points = c(), basin = 0) {
print(paste0("point = ", point))
points <- c(points, point)
basin <- basin + 1
to_points <- filter(adjacent_df, from == point)$to
for (i in 1:length(to_points)) {
to_point <- to_points[i]
height <- input_vector[to_point]
if (!(to_point %in% points)) {
if (height == 9) {
print(paste0("returned basin = ", basin))
return(basin)
}
else {
print(basin)
basin <- basin + find_basin(to_point, points, basin)
}
}
}
}
print(find_basin(2))
print(find_basin(10))
find_basin <- function(point, points = c(), basin = 0) {
print(paste0("point = ", point))
points <- c(points, point)
to_points <- filter(adjacent_df, from == point)$to
for (i in 1:length(to_points)) {
to_point <- to_points[i]
height <- input_vector[to_point]
if (!(to_point %in% points)) {
if (height == 9) {
print(paste0("returned basin = ", basin))
return(basin)
}
else {
print(basin)
basin <- basin + 1
}
}
}
}
print(find_basin(10))
print(find_basin(2))
find_basin <- function(point, points = c(), basin = 0) {
print(paste0("point = ", point))
points <- c(points, point)
to_points <- filter(adjacent_df, from == point)$to
print(to_points)
for (i in 1:length(to_points)) {
to_point <- to_points[i]
height <- input_vector[to_point]
if (!(to_point %in% points)) {
if (height == 9) {
print(paste0("returned basin = ", basin))
return(basin)
}
else {
print(basin)
basin <- basin + 1
}
}
}
}
print(find_basin(2))
find_basin <- function(point, points = c(), basin = 1) {
print(paste0("point = ", point))
points <- c(points, point)
to_points <- filter(adjacent_df, from == point)$to
print(to_points)
for (i in 1:length(to_points)) {
to_point <- to_points[i]
height <- input_vector[to_point]
if (!(to_point %in% points)) {
if (height == 9) {
print(paste0("returned basin = ", basin))
return(basin)
}
else {
print(basin)
basin <- basin + 1
}
}
}
}
print(find_basin(2))
find_basin <- function(point, points = c(), basin = 1) {
print(paste0("point = ", point))
points <- c(points, point)
to_points <- filter(adjacent_df, from == point)$to
print(to_points)
for (i in 1:length(to_points)) {
to_point <- to_points[i]
height <- input_vector[to_point]
if (!(to_point %in% points)) {
print(paste0("to point", to_point))
if (height == 9) {
print(paste0("returned basin = ", basin))
return(basin)
}
else {
print(basin)
basin <- basin + 1
}
}
}
}
print(find_basin(2))
find_basin <- function(point, points = c(), basin = 1) {
print(paste0("point = ", point))
points <- c(points, point)
to_points <- filter(adjacent_df, from == point)$to
print(to_points)
for (i in 1:length(to_points)) {
to_point <- to_points[i]
height <- input_vector[to_point]
if (!(to_point %in% points)) {
print(paste0("to point = ", to_point))
if (height == 9) {
print(paste0("returned basin = ", basin))
return(basin)
}
else {
print(basin)
basin <- basin + 1
}
}
}
}
print(find_basin(2))
find_basin <- function(point, points = c(), basin = 1) {
print(paste0("point = ", point))
points <- c(points, point)
to_points <- filter(adjacent_df, from == point)$to
print(to_points)
for (i in 1:length(to_points)) {
to_point <- to_points[i]
height <- input_vector[to_point]
if (!(to_point %in% points)) {
print(paste0("to point = ", to_point))
if (height == 9) {
print(paste0("returned basin = ", basin))
return(basin)
}
else {
print(basin)
basin <- basin + find_basin(to_point, points, basin)
}
}
}
}
print(find_basin(2))
library(raster)
library(tidyverse)
input <- read.csv("Day9Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(do.call(rbind, strsplit(input[,1], split = "")),
stringsAsFactors = FALSE)
input <- apply(input, 2, function(x) as.integer(x))
input_vector <- as.vector(t(input))
input_raster <- raster(input)
n_cells <- length(input_vector)
adjacent_df <- as.data.frame(adjacent(input_raster, cells = 1:n_cells, sorted = TRUE))
low_points <- adjacent_df %>%
mutate(from_val = input_vector[from],
to_val = input_vector[to],
from_less_to = from_val < to_val) %>%
group_by(from) %>% summarize(n_less = sum(from_val < to_val),
n_total = n(),
low_point = n_less == n_total) %>%
filter(low_point == TRUE)
sapply(input, function(x) {
return(x[x == 9] <- *)
})
sapply(input, function(x) {
return(x[x == 9] <- "*")
})
sapply(input, function(x) {
print(x)
return(x[x == 9] <- "*")
})
input[,1]
input[1,]
input[1,] == 9
input[input[1,] == 9] <- "*"
input
sapply(input, function(x) {
x[x == 9] <- "*"
return(x)
})
sapply(input, function(x) {
print(x)
x[x == 9] <- "*"
return(x)
})
library(raster)
library(tidyverse)
input <- read.csv("Day9Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(do.call(rbind, strsplit(input[,1], split = "")),
stringsAsFactors = FALSE)
input <- apply(input, 2, function(x) as.integer(x))
input_vector <- as.vector(t(input))
input_raster <- raster(input)
n_cells <- length(input_vector)
adjacent_df <- as.data.frame(adjacent(input_raster, cells = 1:n_cells, sorted = TRUE))
low_points <- adjacent_df %>%
mutate(from_val = input_vector[from],
to_val = input_vector[to],
from_less_to = from_val < to_val) %>%
group_by(from) %>% summarize(n_less = sum(from_val < to_val),
n_total = n(),
low_point = n_less == n_total) %>%
filter(low_point == TRUE)
sapply(input, function(x) {
print(x)
x[x == 9] <- "*"
return(x)
})
matrix(sapply(input, function(x) {
print(x)
x[x == 9] <- "*"
return(x)
}), nrow = nrow(input), ncol = ncol(input))
library(raster)
library(tidyverse)
input <- read.csv("Day9Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(do.call(rbind, strsplit(input[,1], split = "")),
stringsAsFactors = FALSE)
input <- apply(input, 2, function(x) as.integer(x))
input_vector <- as.vector(t(input))
input_raster <- raster(input)
n_cells <- length(input_vector)
adjacent_df <- as.data.frame(adjacent(input_raster, cells = 1:n_cells, sorted = TRUE))
low_points <- adjacent_df %>%
mutate(from_val = input_vector[from],
to_val = input_vector[to],
from_less_to = from_val < to_val) %>%
group_by(from) %>% summarize(n_less = sum(from_val < to_val),
n_total = n(),
low_point = n_less == n_total) %>%
filter(low_point == TRUE)
matrix(sapply(input, function(x) {
print(x)
x[x != 9] <- "*"
return(x)
}), nrow = nrow(input), ncol = ncol(input))
library(raster)
library(tidyverse)
input <- read.csv("Day9Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(do.call(rbind, strsplit(input[,1], split = "")),
stringsAsFactors = FALSE)
input <- apply(input, 2, function(x) as.integer(x))
input_vector <- as.vector(t(input))
input_raster <- raster(input)
n_cells <- length(input_vector)
adjacent_df <- as.data.frame(adjacent(input_raster, cells = 1:n_cells, sorted = TRUE))
low_points <- adjacent_df %>%
mutate(from_val = input_vector[from],
to_val = input_vector[to],
from_less_to = from_val < to_val) %>%
group_by(from) %>% summarize(n_less = sum(from_val < to_val),
n_total = n(),
low_point = n_less == n_total) %>%
filter(low_point == TRUE)
matrix(sapply(input, function(x) {
x[x != 9] <- "*"
return(x)
}), nrow = nrow(input), ncol = ncol(input))
matrix(sapply(input, function(x) {
x[x != 9] <- "*"
x[x == 9] <- "-"
return(x)
}), nrow = nrow(input), ncol = ncol(input))
matrix(sapply(input, function(x) {
x[x != 9] <- "*"
x[x == 9] <- "x"
return(x)
}), nrow = nrow(input), ncol = ncol(input))
library(raster)
library(tidyverse)
input <- read.csv("Day9Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(do.call(rbind, strsplit(input[,1], split = "")),
stringsAsFactors = FALSE)
input <- apply(input, 2, function(x) as.integer(x))
input_vector <- as.vector(t(input))
input_raster <- raster(input)
n_cells <- length(input_vector)
adjacent_df <- as.data.frame(adjacent(input_raster, cells = 1:n_cells, sorted = TRUE))
low_points <- adjacent_df %>%
mutate(from_val = input_vector[from],
to_val = input_vector[to],
from_less_to = from_val < to_val) %>%
group_by(from) %>% summarize(n_less = sum(from_val < to_val),
n_total = n(),
low_point = n_less == n_total) %>%
filter(low_point == TRUE)
matrix(sapply(input, function(x) {
x[x != 9] <- "*"
x[x == 9] <- "x"
return(x)
}), nrow = nrow(input), ncol = ncol(input))
basins <- matrix(sapply(input, function(x) {
x[x != 9] <- "*"
x[x == 9] <- "x"
return(x)
}), nrow = nrow(input), ncol = ncol(input))
View(basins)
basins <- matrix(sapply(input, function(x) {
x[x != 9] <- "*"
x[x == 9] <- "xxx"
return(x)
}), nrow = nrow(input), ncol = ncol(input))
basins <- matrix(sapply(input, function(x) {
x[x != 9] <- "*"
x[x == 9] <- "xxxxxx"
return(x)
}), nrow = nrow(input), ncol = ncol(input))
adjacent_df
library(raster)
library(tidyverse)
input <- read.csv("Day9Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(do.call(rbind, strsplit(input[,1], split = "")),
stringsAsFactors = FALSE)
input <- apply(input, 2, function(x) as.integer(x))
input_vector <- as.vector(t(input))
input_raster <- raster(input)
n_cells <- length(input_vector)
adjacent_df <- as.data.frame(adjacent(input_raster, cells = 1:n_cells, sorted = TRUE))
basins <- matrix(sapply(input, function(x) {
x[x != 9] <- "*"
x[x == 9] <- "xxxxxx"
return(x)
}), nrow = nrow(input), ncol = ncol(input))
adjacent_df
View(basins)
library(raster)
library(tidyverse)
input <- read.csv("Day9Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(do.call(rbind, strsplit(input[,1], split = "")),
stringsAsFactors = FALSE)
input <- apply(input, 2, function(x) as.integer(x))
input_vector <- as.vector(t(input))
input_raster <- raster(input)
n_cells <- length(input_vector)
adjacent_df <- as.data.frame(adjacent(input_raster, cells = 1:n_cells, sorted = TRUE))
basins <- matrix(sapply(input, function(x) {
x[x != 9] <- " "
x[x == 9] <- "xxxxxxx"
return(x)
}), nrow = nrow(input), ncol = ncol(input))
adjacent_df
library(raster)
library(tidyverse)
input <- read.csv("Day9Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(do.call(rbind, strsplit(input[,1], split = "")),
stringsAsFactors = FALSE)
input <- apply(input, 2, function(x) as.integer(x))
input_vector <- as.vector(t(input))
input_raster <- raster(input)
n_cells <- length(input_vector)
adjacent_df <- as.data.frame(adjacent(input_raster, cells = 1:n_cells, sorted = TRUE))
basins <- matrix(sapply(input, function(x) {
x[x != 9] <- " "
x[x == 9] <- "xxxxxxx"
return(x)
}), nrow = nrow(input), ncol = ncol(input))
View(input)
View(basins)
library(raster)
library(tidyverse)
input <- read.csv("Day9Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(do.call(rbind, strsplit(input[,1], split = "")),
stringsAsFactors = FALSE)
input <- apply(input, 2, function(x) as.integer(x))
input_vector <- as.vector(t(input))
input_raster <- raster(input)
n_cells <- length(input_vector)
adjacent_df <- as.data.frame(adjacent(input_raster, cells = 1:n_cells, sorted = TRUE))
low_points <- adjacent_df %>%
mutate(from_val = input_vector[from],
to_val = input_vector[to],
from_less_to = from_val < to_val) %>%
group_by(from) %>% summarize(n_less = sum(from_val < to_val),
n_total = n(),
low_point = n_less == n_total) %>%
filter(low_point == TRUE)
basins <- matrix(sapply(input, function(x) {
x[x != 9] <- " "
x[x == 9] <- "xxxxxxx"
return(x)
}), nrow = nrow(input), ncol = ncol(input))
sapply(input, function(x) {
x[x != 9] <- " "
x[x == 9] <- "xxxxxxx"
return(x)
})
sapply(input, function(x) {
x[x != 9] <- " "
x[x == 9] <- "xxxxxxx"
return(x)
})[low_points$from]
low_points$from
low_points
basins
basins <- sapply(input, function(x) {
x[x != 9] <- " "
x[x == 9] <- "xxxxxxx"
return(x)
})
basins <- sapply(input, function(x) {
x[x != 9] <- " "
x[x == 9] <- "xxxxxxx"
return(x)
})
basins[low_points$from] <- "*******"
library(raster)
library(tidyverse)
input <- read.csv("Day9Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(do.call(rbind, strsplit(input[,1], split = "")),
stringsAsFactors = FALSE)
input <- apply(input, 2, function(x) as.integer(x))
input_vector <- as.vector(t(input))
input_raster <- raster(input)
n_cells <- length(input_vector)
adjacent_df <- as.data.frame(adjacent(input_raster, cells = 1:n_cells, sorted = TRUE))
low_points <- adjacent_df %>%
mutate(from_val = input_vector[from],
to_val = input_vector[to],
from_less_to = from_val < to_val) %>%
group_by(from) %>% summarize(n_less = sum(from_val < to_val),
n_total = n(),
low_point = n_less == n_total) %>%
filter(low_point == TRUE)
basins <- sapply(input, function(x) {
x[x != 9] <- " "
x[x == 9] <- "xxxxxxx"
return(x)
})
basins[low_points$from] <- "*******"
basins <- matrix(basins, nrow = nrow(input), ncol = ncol(input))
View(basins)
library(raster)
library(tidyverse)
input <- read.csv("Day9Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(do.call(rbind, strsplit(input[,1], split = "")),
stringsAsFactors = FALSE)
input <- apply(input, 2, function(x) as.integer(x))
input_vector <- as.vector(t(input))
input_raster <- raster(input)
n_cells <- length(input_vector)
adjacent_df <- as.data.frame(adjacent(input_raster, cells = 1:n_cells, sorted = TRUE))
low_points <- adjacent_df %>%
mutate(from_val = input_vector[from],
to_val = input_vector[to],
from_less_to = from_val < to_val) %>%
group_by(from) %>% summarize(n_less = sum(from_val < to_val),
n_total = n(),
low_point = n_less == n_total) %>%
filter(low_point == TRUE)
basins <- sapply(input, function(x) {
x[x != 9] <- " "
x[x == 9] <- "xxxxxxx"
return(x)
})
basins[low_points$from] <- "low"
basins <- matrix(basins, nrow = nrow(input), ncol = ncol(input))
