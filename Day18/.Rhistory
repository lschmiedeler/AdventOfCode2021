}
if (x > target_x[length(target_x)] | y < target_y[length(target_y)]) {
# print(paste0("target hit at x = ", x, " and y = ", y))
return(0)
}
}
}
# plot origin point, steps, and target rectangle
# ggplot() +
#   geom_rect(mapping = aes(xmin = target_x[1],
#                           xmax = target_x[length(target_x)],
#                           ymin = target_y[1],
#                           ymax = target_y[length(target_y)],),
#             fill = "red", color = "red", alpha = 0.5) +
#   geom_point(data = steps, aes(x = x, y = y), size = 2) +
#   theme_minimal()
# create df of coordinates and find max_y
range <- 10
xs <- c()
ys <- c()
for (i in 1:x_range) {
xs <- c(xs, i:x_range)
ys <- c(ys, rep(i, times = 10 - i + 1))
}
df <- data.frame(x = c(xs, ys), y = c(ys, xs)) # remove duplicates
non_dup <- df %>% filter(x != y)
dup <- (df %>% filter(x == y))[1:10,]
df <- rbind(non_dup, dup)
# sort by xs
# apply function
mutate(df, new = x + 2)
library(tidyverse)
target_x <- 20:30
target_y <- -10:-5
# steps <<- data.frame(x = c(0, v[1]), y = c(0, v[2]))
take_steps <- function(v) {
x <- v[1]
y <- v[2]
max_y <- y
while(TRUE) {
x0 <- x
y0 <- y
x <- x + v[1]
y <- y + v[2] - 1
if (x > 0) {
x <- x - 1
}
if (x < 0) {
x <- x + 1
}
if (x < x0) {
x <- x0
}
# steps <<- rbind(steps, data.frame(x = x, y = y))
v <- c(x - x0, y - y0)
if (y > max_y) {
max_y <- y
}
if (x %in% target_x & y %in% target_y) {
# print(paste0("target hit at x = ", x, " and y = ", y))
return(max_y)
}
if (x > target_x[length(target_x)] | y < target_y[length(target_y)]) {
# print(paste0("target hit at x = ", x, " and y = ", y))
return(0)
}
}
}
# plot origin point, steps, and target rectangle
# ggplot() +
#   geom_rect(mapping = aes(xmin = target_x[1],
#                           xmax = target_x[length(target_x)],
#                           ymin = target_y[1],
#                           ymax = target_y[length(target_y)],),
#             fill = "red", color = "red", alpha = 0.5) +
#   geom_point(data = steps, aes(x = x, y = y), size = 2) +
#   theme_minimal()
# create df of coordinates and find max_y
range <- 10
xs <- c()
ys <- c()
for (i in 1:x_range) {
xs <- c(xs, i:x_range)
ys <- c(ys, rep(i, times = 10 - i + 1))
}
df <- data.frame(x = c(xs, ys), y = c(ys, xs)) # remove duplicates
non_dup <- df %>% filter(x != y)
dup <- (df %>% filter(x == y))[1:10,]
df <- rbind(non_dup, dup)
# sort by xs
# apply function
dplyr::mutate(df, new = x + 2)
df
library(tidyverse)
target_x <- 20:30
target_y <- -10:-5
# steps <<- data.frame(x = c(0, v[1]), y = c(0, v[2]))
take_steps <- function(v) {
x <- v[1]
y <- v[2]
max_y <- y
while(TRUE) {
x0 <- x
y0 <- y
x <- x + v[1]
y <- y + v[2] - 1
if (x > 0) {
x <- x - 1
}
if (x < 0) {
x <- x + 1
}
if (x < x0) {
x <- x0
}
# steps <<- rbind(steps, data.frame(x = x, y = y))
v <- c(x - x0, y - y0)
if (y > max_y) {
max_y <- y
}
if (x %in% target_x & y %in% target_y) {
# print(paste0("target hit at x = ", x, " and y = ", y))
return(max_y)
}
if (x > target_x[length(target_x)] | y < target_y[length(target_y)]) {
# print(paste0("target hit at x = ", x, " and y = ", y))
return(0)
}
}
}
# plot origin point, steps, and target rectangle
# ggplot() +
#   geom_rect(mapping = aes(xmin = target_x[1],
#                           xmax = target_x[length(target_x)],
#                           ymin = target_y[1],
#                           ymax = target_y[length(target_y)],),
#             fill = "red", color = "red", alpha = 0.5) +
#   geom_point(data = steps, aes(x = x, y = y), size = 2) +
#   theme_minimal()
# create df of coordinates and find max_y
range <- 10
xs <- c()
ys <- c()
for (i in 1:x_range) {
xs <- c(xs, i:x_range)
ys <- c(ys, rep(i, times = 10 - i + 1))
}
df <- data.frame(x = c(xs, ys), y = c(ys, xs)) # remove duplicates
non_dup <- df %>% filter(x != y)
dup <- (df %>% filter(x == y))[1:10,]
df <- rbind(non_dup, dup)
# sort by xs
# apply function
dplyr::mutate(df, new = x + 2)
library(tidyverse)
target_x <- 20:30
target_y <- -10:-5
# steps <<- data.frame(x = c(0, v[1]), y = c(0, v[2]))
take_steps <- function(v) {
x <- v[1]
y <- v[2]
max_y <- y
while(TRUE) {
x0 <- x
y0 <- y
x <- x + v[1]
y <- y + v[2] - 1
if (x > 0) {
x <- x - 1
}
if (x < 0) {
x <- x + 1
}
if (x < x0) {
x <- x0
}
# steps <<- rbind(steps, data.frame(x = x, y = y))
v <- c(x - x0, y - y0)
if (y > max_y) {
max_y <- y
}
if (x %in% target_x & y %in% target_y) {
# print(paste0("target hit at x = ", x, " and y = ", y))
return(max_y)
}
if (x > target_x[length(target_x)] | y < target_y[length(target_y)]) {
# print(paste0("target hit at x = ", x, " and y = ", y))
return(0)
}
}
}
# plot origin point, steps, and target rectangle
# ggplot() +
#   geom_rect(mapping = aes(xmin = target_x[1],
#                           xmax = target_x[length(target_x)],
#                           ymin = target_y[1],
#                           ymax = target_y[length(target_y)],),
#             fill = "red", color = "red", alpha = 0.5) +
#   geom_point(data = steps, aes(x = x, y = y), size = 2) +
#   theme_minimal()
# create df of coordinates and find max_y
range <- 10
xs <- c()
ys <- c()
for (i in 1:x_range) {
xs <- c(xs, i:x_range)
ys <- c(ys, rep(i, times = 10 - i + 1))
}
df <- data.frame(x = c(xs, ys), y = c(ys, xs)) # remove duplicates
non_dup <- df %>% filter(x != y)
dup <- (df %>% filter(x == y))[1:10,]
df <- rbind(non_dup, dup)
library(tidyverse)
target_x <- 20:30
target_y <- -10:-5
# steps <<- data.frame(x = c(0, v[1]), y = c(0, v[2]))
take_steps <- function(v) {
x <- v[1]
y <- v[2]
max_y <- y
while(TRUE) {
x0 <- x
y0 <- y
x <- x + v[1]
y <- y + v[2] - 1
if (x > 0) {
x <- x - 1
}
if (x < 0) {
x <- x + 1
}
if (x < x0) {
x <- x0
}
# steps <<- rbind(steps, data.frame(x = x, y = y))
v <- c(x - x0, y - y0)
if (y > max_y) {
max_y <- y
}
if (x %in% target_x & y %in% target_y) {
# print(paste0("target hit at x = ", x, " and y = ", y))
return(max_y)
}
if (x > target_x[length(target_x)] | y < target_y[length(target_y)]) {
# print(paste0("target hit at x = ", x, " and y = ", y))
return(0)
}
}
}
range <- 10
xs <- c()
ys <- c()
for (i in 1:x_range) {
xs <- c(xs, i:x_range)
ys <- c(ys, rep(i, times = 10 - i + 1))
}
df <- data.frame(x = c(xs, ys), y = c(ys, xs)) # remove duplicates
library(tidyverse)
target_x <- 20:30
target_y <- -10:-5
# steps <<- data.frame(x = c(0, v[1]), y = c(0, v[2]))
take_steps <- function(v) {
x <- v[1]
y <- v[2]
max_y <- y
while(TRUE) {
x0 <- x
y0 <- y
x <- x + v[1]
y <- y + v[2] - 1
if (x > 0) {
x <- x - 1
}
if (x < 0) {
x <- x + 1
}
if (x < x0) {
x <- x0
}
# steps <<- rbind(steps, data.frame(x = x, y = y))
v <- c(x - x0, y - y0)
if (y > max_y) {
max_y <- y
}
if (x %in% target_x & y %in% target_y) {
# print(paste0("target hit at x = ", x, " and y = ", y))
return(max_y)
}
if (x > target_x[length(target_x)] | y < target_y[length(target_y)]) {
# print(paste0("target hit at x = ", x, " and y = ", y))
return(0)
}
}
}
# plot origin point, steps, and target rectangle
# ggplot() +
#   geom_rect(mapping = aes(xmin = target_x[1],
#                           xmax = target_x[length(target_x)],
#                           ymin = target_y[1],
#                           ymax = target_y[length(target_y)],),
#             fill = "red", color = "red", alpha = 0.5) +
#   geom_point(data = steps, aes(x = x, y = y), size = 2) +
#   theme_minimal()
# create df of coordinates and find max_y
range <- 10
xs <- c()
ys <- c()
for (i in 1:range) {
xs <- c(xs, i:range)
ys <- c(ys, rep(i, times = 10 - i + 1))
}
df <- data.frame(x = c(xs, ys), y = c(ys, xs)) # remove duplicates
non_dup <- df %>% filter(x != y)
dup <- (df %>% filter(x == y))[1:10,]
df <- rbind(non_dup, dup)
# sort by xs
# apply function
dplyr::mutate(df, new = x + 2)
# apply function
mutate(df, max_y = take_steps(c(x,y)))
# apply function
mutate(df, sum = x + y)
library(tidyverse)
target_x <- 20:30
target_y <- -10:-5
# steps <<- data.frame(x = c(0, v[1]), y = c(0, v[2]))
take_steps <- function(x_vel, y_vel) {
v <- c(x_vel, y_vel)
x <- v[1]
y <- v[2]
max_y <- y
while(TRUE) {
x0 <- x
y0 <- y
x <- x + v[1]
y <- y + v[2] - 1
if (x > 0) {
x <- x - 1
}
if (x < 0) {
x <- x + 1
}
if (x < x0) {
x <- x0
}
# steps <<- rbind(steps, data.frame(x = x, y = y))
v <- c(x - x0, y - y0)
if (y > max_y) {
max_y <- y
}
if (x %in% target_x & y %in% target_y) {
# print(paste0("target hit at x = ", x, " and y = ", y))
return(max_y)
}
if (x > target_x[length(target_x)] | y < target_y[length(target_y)]) {
# print(paste0("target hit at x = ", x, " and y = ", y))
return(0)
}
}
}
# plot origin point, steps, and target rectangle
# ggplot() +
#   geom_rect(mapping = aes(xmin = target_x[1],
#                           xmax = target_x[length(target_x)],
#                           ymin = target_y[1],
#                           ymax = target_y[length(target_y)],),
#             fill = "red", color = "red", alpha = 0.5) +
#   geom_point(data = steps, aes(x = x, y = y), size = 2) +
#   theme_minimal()
# create df of coordinates and find max_y
range <- 10
xs <- c()
ys <- c()
for (i in 1:range) {
xs <- c(xs, i:range)
ys <- c(ys, rep(i, times = 10 - i + 1))
}
df <- data.frame(x = c(xs, ys), y = c(ys, xs)) # remove duplicates
non_dup <- df %>% filter(x != y)
dup <- (df %>% filter(x == y))[1:10,]
df <- rbind(non_dup, dup)
# sort by xs
# apply function
mutate(df, max_y = take_steps(x, y))
View(df)
library(tidyverse)
target_x <- 20:30
target_y <- -10:-5
# steps <<- data.frame(x = c(0, v[1]), y = c(0, v[2]))
take_steps <- function(x_vel, y_vel) {
v <- c(x_vel, y_vel)
x <- v[1]
y <- v[2]
max_y <- y
while(TRUE) {
x0 <- x
y0 <- y
x <- x + v[1]
y <- y + v[2] - 1
if (x > 0) {
x <- x - 1
}
if (x < 0) {
x <- x + 1
}
if (x < x0) {
x <- x0
}
# steps <<- rbind(steps, data.frame(x = x, y = y))
v <- c(x - x0, y - y0)
if (y > max_y) {
max_y <- y
}
if (x %in% target_x & y %in% target_y) {
# print(paste0("target hit at x = ", x, " and y = ", y))
return(max_y)
}
if (x > target_x[length(target_x)] | y < target_y[length(target_y)]) {
# print(paste0("target hit at x = ", x, " and y = ", y))
return(0)
}
}
}
# plot origin point, steps, and target rectangle
# ggplot() +
#   geom_rect(mapping = aes(xmin = target_x[1],
#                           xmax = target_x[length(target_x)],
#                           ymin = target_y[1],
#                           ymax = target_y[length(target_y)],),
#             fill = "red", color = "red", alpha = 0.5) +
#   geom_point(data = steps, aes(x = x, y = y), size = 2) +
#   theme_minimal()
# create df of coordinates and find max_y
range <- 10
xs <- c()
ys <- c()
for (i in 1:range) {
xs <- c(xs, i:range)
ys <- c(ys, rep(i, times = 10 - i + 1))
}
df <- data.frame(x = c(xs, ys), y = c(ys, xs)) # remove duplicates
non_dup <- df %>% filter(x != y)
dup <- (df %>% filter(x == y))[1:10,]
df <- rbind(non_dup, dup)
# sort by xs
# apply function
df <- mutate(df, max_y = take_steps(x, y))
View(df)
library(tidyverse)
target_x <- 20:30
target_y <- -10:-5
# steps <<- data.frame(x = c(0, v[1]), y = c(0, v[2]))
take_steps <- function(x_vel, y_vel) {
v <- c(x_vel, y_vel)
x <- v[1]
y <- v[2]
max_y <- y
while(TRUE) {
x0 <- x
y0 <- y
x <- x + v[1]
y <- y + v[2] - 1
if (x > 0) {
x <- x - 1
}
if (x < 0) {
x <- x + 1
}
if (x < x0) {
x <- x0
}
# steps <<- rbind(steps, data.frame(x = x, y = y))
v <- c(x - x0, y - y0)
if (y > max_y) {
max_y <- y
}
if (x %in% target_x & y %in% target_y) {
# print(paste0("target hit at x = ", x, " and y = ", y))
return(max_y)
}
if (x > target_x[length(target_x)] | y < target_y[length(target_y)]) {
# print(paste0("target hit at x = ", x, " and y = ", y))
return(0)
}
}
}
# plot origin point, steps, and target rectangle
# ggplot() +
#   geom_rect(mapping = aes(xmin = target_x[1],
#                           xmax = target_x[length(target_x)],
#                           ymin = target_y[1],
#                           ymax = target_y[length(target_y)],),
#             fill = "red", color = "red", alpha = 0.5) +
#   geom_point(data = steps, aes(x = x, y = y), size = 2) +
#   theme_minimal()
# create df of coordinates and find max_y
range <- 10
xs <- c()
ys <- c()
for (i in 1:range) {
xs <- c(xs, i:range)
ys <- c(ys, rep(i, times = 10 - i + 1))
}
df <- data.frame(x = c(xs, ys), y = c(ys, xs)) # remove duplicates
non_dup <- df %>% filter(x != y)
dup <- (df %>% filter(x == y))[1:10,]
df <- rbind(non_dup, dup)
# sort by xs
# apply function
df <- mutate(df, max = max(x, y))
View(df)
setwd("~/GitHub/AdventOfCode2021/Day18")
