fredr_set_key("9280606dbfb074b8932d6562231ca6df")
install.packages("fredr")
library(fredr)
fredr_set_key("9280606dbfb074b8932d6562231ca6df")
fredr(
series_id = "UNRATE",
observation_start = as.Date("1990-01-01"),
observation_end = as.Date("2000-01-01")
)
fredr(
series_id = "UNRATE",
observation_start = as.Date("1990-01-01"),
observation_end = as.Date("2000-01-01"),
frequency = "q"
)
fredr(
series_id = "UNRATE",
observation_start = as.Date("1990-01-01"),
observation_end = as.Date("2000-01-01")
)
fredr(
series_id = "UNRATE",
observation_start = as.Date("1990-01-01"),
observation_end = as.Date("2000-01-01")
)$date
unrate <- fredr(
series_id = "UNRATE",
observation_start = as.Date("1990-01-01"),
observation_end = as.Date("2000-01-01")
)
View(unrate)
library(tidyverse)
unrate <- fredr(
series_id = "UNRATE",
observation_start = as.Date("1990-01-01"),
observation_end = as.Date("2000-01-01")
) %>% select(date, value)
library(lubridate)
unrate$date <- parse_date_time(unrate$date, "%Y-%m-%d")
summary(unrate)
ggplot(unrate, aes(x = date, y = value)) +
geom_point()
ggplot(unrate, aes(x = date, y = value)) +
geom_line()
summary(unrate)
library(fredr)
library(tidyverse)
library(lubridate)
fredr_set_key("9280606dbfb074b8932d6562231ca6df")
unrate <- fredr(
series_id = "UNRATE",
observation_start = as.Date("1990-01-01"),
observation_end = as.Date("2020-01-01")
) %>% select(date, value)
unrate$date <- parse_date_time(unrate$date, "%Y-%m-%d")
ggplot(unrate, aes(x = date, y = value)) +
geom_line()
library(fredr)
library(tidyverse)
library(lubridate)
fredr_set_key("9280606dbfb074b8932d6562231ca6df")
unrate <- fredr(
series_id = "UNRATE",
observation_start = as.Date("1960-01-01"),
observation_end = as.Date("2020-01-01")
) %>% select(date, value)
unrate$date <- parse_date_time(unrate$date, "%Y-%m-%d")
ggplot(unrate, aes(x = date, y = value)) +
geom_line()
library(fredr)
library(tidyverse)
library(lubridate)
fredr_set_key("9280606dbfb074b8932d6562231ca6df")
unrate <- fredr(
series_id = "UNRATE",
observation_start = as.Date("1950-01-01"),
observation_end = as.Date("2020-01-01")
) %>% select(date, value)
unrate$date <- parse_date_time(unrate$date, "%Y-%m-%d")
ggplot(unrate, aes(x = date, y = value)) +
geom_line()
library(fredr)
library(tidyverse)
library(lubridate)
fredr_set_key("9280606dbfb074b8932d6562231ca6df")
unrate <- fredr(
series_id = "UNRATE",
observation_start = as.Date("1900-01-01"),
observation_end = as.Date("2020-01-01")
) %>% select(date, value)
unrate$date <- parse_date_time(unrate$date, "%Y-%m-%d")
ggplot(unrate, aes(x = date, y = value)) +
geom_line()
summary(unrate)
fredr_set_key("9280606dbfb074b8932d6562231ca6df")
unrate <- fredr(
series_id = "UNRATE"
#observation_start = as.Date("1900-01-01"),
#observation_end = as.Date("2020-01-01")
) %>% select(date, value)
unrate$date <- parse_date_time(unrate$date, "%Y-%m-%d")
ggplot(unrate, aes(x = date, y = value)) +
geom_line()
library(fredr)
library(tidyverse)
library(lubridate)
fredr_set_key("9280606dbfb074b8932d6562231ca6df")
unrate <- fredr(series_id = "UNRATE") %>% select(date, value)
unrate$date <- parse_date_time(unrate$date, "%Y-%m-%d")
ggplot(unrate, aes(x = date, y = value)) +
geom_line()
ggplot(unrate, aes(x = date, y = value)) +
geom_line() +
theme_classic()
ggplot(unrate, aes(x = date, y = value)) +
geom_line() +
theme_bw()
library(fredr)
library(tidyverse)
library(lubridate)
fredr_set_key("9280606dbfb074b8932d6562231ca6df")
unrate <- fredr(series_id = "UNRATE", units = "chg") %>% select(date, value)
unrate$date <- parse_date_time(unrate$date, "%Y-%m-%d")
ggplot(unrate, aes(x = date, y = value)) +
geom_line() +
theme_bw()
View(unrate)
min_wage <- fredr(series_id = "STTMINWGFG", units = "chg") %>% select(date, value)
summary(min_wage)
library(fredr)
library(tidyverse)
library(lubridate)
fredr_set_key("9280606dbfb074b8932d6562231ca6df")
unrate <- fredr(series_id = "UNRATE", units = "chg") %>% select(date, value)
ggplot(unrate, aes(x = date, y = value)) +
geom_line() +
theme_bw()
min_wage <- fredr(series_id = "STTMINWGFG", units = "chg") %>% select(date, value)
library(fredr)
library(tidyverse)
library(lubridate)
fredr_set_key("9280606dbfb074b8932d6562231ca6df")
unrate <- fredr(series_id = "UNRATE", units = "chg") %>% select(date, value)
ggplot(unrate, aes(x = date, y = value)) +
geom_line() +
theme_bw()
min_wage <- fredr(series_id = "STTMINWGFG", units = "chg") %>% select(date, value)
ggplot(min_wage, aes(x = date, y = value)) +
geom_line() +
theme_bw()
View(min_wage)
library(fredr)
library(tidyverse)
library(lubridate)
fredr_set_key("9280606dbfb074b8932d6562231ca6df")
unrate <- fredr(series_id = "UNRATE", units = "chg") %>% select(date, value)
ggplot(unrate, aes(x = date, y = value)) +
geom_line() +
theme_bw()
min_wage <- fredr(series_id = "STTMINWGFG") %>% select(date, value)
ggplot(min_wage, aes(x = date, y = value)) +
geom_line() +
theme_bw()
library(fredr)
library(tidyverse)
library(lubridate)
fredr_set_key("9280606dbfb074b8932d6562231ca6df")
unrate <- fredr(series_id = "UNRATE") %>% select(date, value)
ggplot(unrate, aes(x = date, y = value)) +
geom_line() +
theme_bw()
min_wage <- fredr(series_id = "STTMINWGFG") %>% select(date, value)
ggplot(min_wage, aes(x = date, y = value)) +
geom_line() +
theme_bw()
library(fredr)
library(tidyverse)
library(lubridate)
fredr_set_key("9280606dbfb074b8932d6562231ca6df")
fredr_category_children(1)
fredr_category_children(0)
fredr_category_children(1)
fredr_category_children(2)
fredr_category_children(3)
fredr_category_children(4)
fredr_category_children(5)
fredr_category_children(6)
fredr_category_children(7)
fredr_category_children(33961)
fredr_category_children(10)
fredr_category_children(11)
fredr_category_children(1)
fredr_category_children(0)
library(fredr)
library(tidyverse)
library(lubridate)
fredr_set_key("9280606dbfb074b8932d6562231ca6df")
unrate <- fredr(series_id = "UNRATE") %>% select(date, value)
ggplot(unrate, aes(x = date, y = value)) +
geom_line() +
theme_bw()
reticulate::repl_python()
#!/usr/bin/python3
# This script lets you view a user's global standing, even if they aren't in the top 100 global scorers right now.
# Of course, if you know that your user is already top 100, this isn't useful because you can see that person's standing on the AOC leaderboard.
# But since AOC doesn't show anyone after position 100, this script can help you find out your position if you're not in the top 100.
# Note: this script was written quickly without much concern for uncommon edge cases or best practices (besides caching - love u eric).
# For example, a somewhat major flaw of it is that it treats people with the same name as the same person, but I haven't yet found that to be a problem.
from sys import argv
from os import path, listdir, mkdir
from subprocess import check_call, DEVNULL
from datetime import datetime, timezone, timedelta
CACHE = "./.leaderboard-cache/"
if not path.isdir(CACHE):
mkdir(CACHE)
timezone_offset = -5.0
tzinfo = timezone(timedelta(hours=timezone_offset))
date = datetime.now(tzinfo)
day = int(date.strftime("%d"))
if len(argv) != 2:
print("Usage: python3 getGlobalStanding.py <desired user's name>")
print("NOTE: If you're an anonymous user, just enter '#<your number>' INCLUDING THE #.")
exit(1)
user = argv[1]
days = listdir(CACHE)
cur = len(days) + 1
# downloads the leaderboard positions from the site if we haven't found them
# don't mess with this folder unless you plan to delete it entirely
while cur <= day:
check_call(["curl", "https://adventofcode.com/2021/leaderboard/day/%i" % cur], stdout=open(".leaderboard-cache/day%i.txt" % cur, 'w'), stderr=DEVNULL)
cur += 1
# sloppily wait for all the files to download asynchronously
# I could just sleep here but I don't want to assume you'll download it quickly
while len(days) != day:
days = listdir(CACHE)
# maps user name to accrued points
points = {}
for day in days:
curPath = CACHE + day
f = open(curPath, 'r')
lines = f.readlines()
f.close()
# gather scores from the top 100 of part 2, and then part 1, respectively
for s, e in ((97, 97 + 100), (196, 196 + 100)):
lines[s] = lines[s][lines[s].index("First"):]
for i in range(s, e):
line = lines[i]
ind = line.index(')')
j = ind - 1
while line[j].isdigit():
j -= 1
p = int(line[j+1:ind])
start = None
sent = '<'
# gotta handle a bunch of different cases to parse the username
if 'height="20' in line:
start = line.index('height="20')+20
elif "leaderboard-anon" in line:
start = line.index('#')
sent = ')'
else:
start = line.index('userphoto')+18
j = start
while line[j] != sent:
j += 1
u = line[start:j]
if len(u.strip()) == 0:
print(line)
points[u] = points.get(u, 0) + (101 - p)
# Want the entire leaderboard? Just uncomment this
#items = sorted(((points[u], u) for u in points), reverse=True)
#prev = None
#i = 0
#for p,u in items:
#    pass
#    if p != prev:
#        i += 1
#        print("POSITION %i" % i)
#        prev = p
#    print("%s has %i points." % (u, p))
uniqueScores = set(points.values())
print("There are %i users with at least one global point." % len(points))
print("There are %i unique scores on the leaderboard." % len(uniqueScores))
if user not in points:
print("User %s doesn't have any global points, so they are not on the leaderboard at all." % user)
else:
greater = sum(points[u] > points[user] for u in points)
pos = sum(v > points[user] for v in set(points.values())) + 1
print("User %s is in position %i, accounting for ties." % (user, pos))
print("There are exactly %i users with a higher score than %s." % (greater, user))
remotes::install_github("saezlab/OmnipathR")
install.packages("installr")
installr::updateR()
setwd("C:/Users/lesch/Dropbox/School 2021-2022 (SLU)/Fall 2021/AdventOfCode/AdventOfCode2021/Day12")
library(tidyverse)
input <- read.csv("Day12Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(t(apply(input, MARGIN = 1, function(x) {
(strsplit(x, split = "-")[[1]])
})))
input <- filter(rbind(input, as.data.frame(t(apply(input, MARGIN = 1, function(x) {
new_row <- c(x[2], x[1])
names(new_row) <- c("V1", "V2")
return(new_row)
})))), V1 != "end", V2 != "start")
n_paths <<- 0
find_paths <- function(node, path) {
path <- c(path, node)
to_nodes <- filter(input, V1 == node)$V2
if ("end" %in% to_nodes & to_nodes[length(to_nodes)] != "end") {
i <- which(to_nodes == "end")
to_nodes <- c(to_nodes[-i], to_nodes[i])
}
for (to in to_nodes) {
if (to != "end") {
if (!(to %in% path) | to == toupper(to)) {
find_paths(to, path)
}
}
else {
path <- c()
n_paths <<- n_paths + 1
return(1)
}
}
}
find_paths("start", c())
print(n_paths)
library(tidyverse)
input <- read.csv("Day12Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(t(apply(input, MARGIN = 1, function(x) {
(strsplit(x, split = "-")[[1]])
})))
input <- filter(rbind(input, as.data.frame(t(apply(input, MARGIN = 1, function(x) {
new_row <- c(x[2], x[1])
names(new_row) <- c("V1", "V2")
return(new_row)
})))), V1 != "end", V2 != "start")
all_nodes <- unique(as.vector(filter(input, V1 != "start"))$V1)
lower_nodes <- all_nodes[all_nodes == tolower(all_nodes)]
find_paths <- function(node, path, repeat_lower) {
path <- c(path, node)
to_nodes <- filter(input, V1 == node)$V2
if ("end" %in% to_nodes & to_nodes[length(to_nodes)] != "end") {
i <- which(to_nodes == "end")
to_nodes <- c(to_nodes[-i], to_nodes[i])
}
for (to in to_nodes) {
if (to != "end") {
if (!(to %in% path) | to == toupper(to) |
(to == repeat_lower & sum(path == repeat_lower) < 2)) {
find_paths(to, path, repeat_lower)
}
}
else {
path <- c()
n_paths <<- n_paths + 1
return(1)
}
}
}
n_paths <<- 0
find_paths("start", c(), "none")
base <- n_paths
total <- base
for (n in lower_nodes) {
n_paths <<- 0
find_paths("start", c(), n)
total <- total + (n_paths - base)
}
print(total)
