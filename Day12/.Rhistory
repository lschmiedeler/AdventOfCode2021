# g <- graph(as.vector(t(input)), directed = FALSE)
# plot(g)
find_paths <- function(node, path) {
path <- c(path, node)
to_nodes <- filter(input, V1 == node)$V2
if ("end" %in% to_nodes & to_nodes[length(to_nodes)] != "end") {
i <- which(to_nodes == "end")
to_nodes <- c(to_nodes[-i], to_nodes[i])
}
for (to in to_nodes) {
if (to != "end") {
if (!(to %in% path) | to == toupper(to)) {
find_paths(to, path)
}
}
else {
path <- c(path, "end")
print(path)
path <- c()
return(1) # add 1 to total number of paths
}
}
}
find_paths("start", c())
n_paths <<- 0
library(igraph)
library(tidyverse)
input <- read.csv("Day12Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(t(apply(input, MARGIN = 1, function(x) {
(strsplit(x, split = "-")[[1]])
})))
input <- filter(rbind(input, as.data.frame(t(apply(input, MARGIN = 1, function(x) {
new_row <- c(x[2], x[1])
names(new_row) <- c("V1", "V2")
return(new_row)
})))), V1 != "end", V2 != "start")
all_nodes <- unique(as.vector(t(input)))
remove <- c()
for (node in all_nodes){
if (node != "start" & node != "end" & node == tolower(node)) {
to_nodes <- filter(input, V1 == node)$V2
to_nodes <- to_nodes[!(to_nodes %in% c("start", "end"))]
if (all(to_nodes == tolower(to_nodes))) {
remove <- c(remove, node)
}
}
}
input <- filter(input, !(V1 %in% remove), !(V2 %in% remove))
# g <- graph(as.vector(t(input)), directed = FALSE)
# plot(g)
n_paths <<- 0
find_paths <- function(node, path) {
path <- c(path, node)
to_nodes <- filter(input, V1 == node)$V2
if ("end" %in% to_nodes & to_nodes[length(to_nodes)] != "end") {
i <- which(to_nodes == "end")
to_nodes <- c(to_nodes[-i], to_nodes[i])
}
for (to in to_nodes) {
if (to != "end") {
if (!(to %in% path) | to == toupper(to)) {
return()
find_paths(to, path)
}
}
else {
path <- c(path, "end")
print(path)
path <- c()
n_paths <<- n_paths + 1
return(1) # add 1 to total number of paths
}
}
}
find_paths("start", c())
n_paths
library(igraph)
library(tidyverse)
input <- read.csv("Day12Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(t(apply(input, MARGIN = 1, function(x) {
(strsplit(x, split = "-")[[1]])
})))
input <- filter(rbind(input, as.data.frame(t(apply(input, MARGIN = 1, function(x) {
new_row <- c(x[2], x[1])
names(new_row) <- c("V1", "V2")
return(new_row)
})))), V1 != "end", V2 != "start")
all_nodes <- unique(as.vector(t(input)))
remove <- c()
for (node in all_nodes){
if (node != "start" & node != "end" & node == tolower(node)) {
to_nodes <- filter(input, V1 == node)$V2
to_nodes <- to_nodes[!(to_nodes %in% c("start", "end"))]
if (all(to_nodes == tolower(to_nodes))) {
remove <- c(remove, node)
}
}
}
input <- filter(input, !(V1 %in% remove), !(V2 %in% remove))
# g <- graph(as.vector(t(input)), directed = FALSE)
# plot(g)
n_paths <<- 0
find_paths <- function(node, path) {
path <- c(path, node)
to_nodes <- filter(input, V1 == node)$V2
if ("end" %in% to_nodes & to_nodes[length(to_nodes)] != "end") {
i <- which(to_nodes == "end")
to_nodes <- c(to_nodes[-i], to_nodes[i])
}
for (to in to_nodes) {
if (to != "end") {
if (!(to %in% path) | to == toupper(to)) {
find_paths(to, path)
}
}
else {
path <- c(path, "end")
print(path)
path <- c()
n_paths <<- n_paths + 1
return(1) # add 1 to total number of paths
}
}
}
find_paths("start", c())
n_paths
library(igraph)
library(tidyverse)
input <- read.csv("Day12Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(t(apply(input, MARGIN = 1, function(x) {
(strsplit(x, split = "-")[[1]])
})))
input <- filter(rbind(input, as.data.frame(t(apply(input, MARGIN = 1, function(x) {
new_row <- c(x[2], x[1])
names(new_row) <- c("V1", "V2")
return(new_row)
})))), V1 != "end", V2 != "start")
all_nodes <- unique(as.vector(t(input)))
remove <- c()
for (node in all_nodes){
if (node != "start" & node != "end" & node == tolower(node)) {
to_nodes <- filter(input, V1 == node)$V2
to_nodes <- to_nodes[!(to_nodes %in% c("start", "end"))]
if (all(to_nodes == tolower(to_nodes))) {
remove <- c(remove, node)
}
}
}
input <- filter(input, !(V1 %in% remove), !(V2 %in% remove))
# g <- graph(as.vector(t(input)), directed = FALSE)
# plot(g)
n_paths <<- 0
find_paths <- function(node, path) {
path <- c(path, node)
to_nodes <- filter(input, V1 == node)$V2
if ("end" %in% to_nodes & to_nodes[length(to_nodes)] != "end") {
i <- which(to_nodes == "end")
to_nodes <- c(to_nodes[-i], to_nodes[i])
}
for (to in to_nodes) {
if (to != "end") {
if (!(to %in% path) | to == toupper(to)) {
find_paths(to, path)
}
}
else {
path <- c()
n_paths <<- n_paths + 1
return(1)
}
}
}
find_paths("start", c())
library(igraph)
library(tidyverse)
input <- read.csv("Day12Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(t(apply(input, MARGIN = 1, function(x) {
(strsplit(x, split = "-")[[1]])
})))
input <- filter(rbind(input, as.data.frame(t(apply(input, MARGIN = 1, function(x) {
new_row <- c(x[2], x[1])
names(new_row) <- c("V1", "V2")
return(new_row)
})))), V1 != "end", V2 != "start")
all_nodes <- unique(as.vector(t(input)))
remove <- c()
for (node in all_nodes){
if (node != "start" & node != "end" & node == tolower(node)) {
to_nodes <- filter(input, V1 == node)$V2
to_nodes <- to_nodes[!(to_nodes %in% c("start", "end"))]
if (all(to_nodes == tolower(to_nodes))) {
remove <- c(remove, node)
}
}
}
input <- filter(input, !(V1 %in% remove), !(V2 %in% remove))
# g <- graph(as.vector(t(input)), directed = FALSE)
# plot(g)
n_paths <<- 0
find_paths <- function(node, path) {
path <- c(path, node)
to_nodes <- filter(input, V1 == node)$V2
if ("end" %in% to_nodes & to_nodes[length(to_nodes)] != "end") {
i <- which(to_nodes == "end")
to_nodes <- c(to_nodes[-i], to_nodes[i])
}
for (to in to_nodes) {
if (to != "end") {
if (!(to %in% path) | to == toupper(to)) {
find_paths(to, path)
}
}
else {
path <- c()
n_paths <<- n_paths + 1
return(1)
}
}
}
find_paths("start", c())
print(n_paths)
library(igraph)
library(tidyverse)
input <- read.csv("Day12Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(t(apply(input, MARGIN = 1, function(x) {
(strsplit(x, split = "-")[[1]])
})))
input <- filter(rbind(input, as.data.frame(t(apply(input, MARGIN = 1, function(x) {
new_row <- c(x[2], x[1])
names(new_row) <- c("V1", "V2")
return(new_row)
})))), V1 != "end", V2 != "start")
all_nodes <- unique(as.vector(t(input)))
remove <- c()
for (node in all_nodes){
if (node != "start" & node != "end" & node == tolower(node)) {
to_nodes <- filter(input, V1 == node)$V2
to_nodes <- to_nodes[!(to_nodes %in% c("start", "end"))]
if (all(to_nodes == tolower(to_nodes))) {
remove <- c(remove, node)
}
}
}
input <- filter(input, !(V1 %in% remove), !(V2 %in% remove))
# g <- graph(as.vector(t(input)), directed = FALSE)
# plot(g)
n_paths <<- 0
find_paths <- function(node, path) {
path <- c(path, node)
to_nodes <- filter(input, V1 == node)$V2
if ("end" %in% to_nodes & to_nodes[length(to_nodes)] != "end") {
i <- which(to_nodes == "end")
to_nodes <- c(to_nodes[-i], to_nodes[i])
}
for (to in to_nodes) {
if (to != "end") {
if (!(to %in% path) | to == toupper(to)) {
find_paths(to, path)
}
}
else {
path <- c()
n_paths <<- n_paths + 1
return(1)
}
}
}
find_paths("start", c())
print(n_paths)
setwd("C:/Users/lesch/Dropbox/School 2021-2022 (SLU)/Fall 2021/AdventOfCode/AdventOfCode2021/Day13")
conn <- file("Day13Input.txt", open = "r")
lines <-readLines(conn)
points <- data.frame()
folds <- data.frame()
for (line in lines) {
if (line != "") {
if (substr(line, 1, 1) != "f") {
point <- as.numeric(strsplit(line, split = ",")[[1]])
points <- rbind(points, point)
}
else {
split <- strsplit(line, split = "=")[[1]]
fold <- c(substr(split[1], nchar(split[1]), nchar(split[1])),
as.numeric(split[2]))
folds <- rbind(folds, fold)
}
}
}
names(points) <- c("x", "y")
names(folds) <- c("direction", "line")
close(conn)
direction <- folds[1,]$direction
line <- as.numeric(folds[1,]$line)
nrow(unique(t(apply(points, MARGIN = 1, function(x) {
if (direction == "x") { i <- 1 }
else {i <- 2}
if (x[i] > line) {
x[i] <- x[i] - 2 * abs(line - x[i])
}
return(x)
}))))
conn <- file("Day13Input.txt", open = "r")
lines <-readLines(conn)
points <- data.frame()
folds <- data.frame()
for (line in lines) {
if (line != "") {
if (substr(line, 1, 1) != "f") {
point <- as.numeric(strsplit(line, split = ",")[[1]])
points <- rbind(points, point)
}
else {
split <- strsplit(line, split = "=")[[1]]
fold <- c(substr(split[1], nchar(split[1]), nchar(split[1])),
as.numeric(split[2]))
folds <- rbind(folds, fold)
}
}
}
names(points) <- c("x", "y")
names(folds) <- c("direction", "line")
close(conn)
direction <- folds[1,]$direction
line <- as.numeric(folds[1,]$line)
print(nrow(unique(t(apply(points, MARGIN = 1, function(x) {
if (direction == "x") { i <- 1 }
else {i <- 2}
if (x[i] > line) {
x[i] <- x[i] - 2 * abs(line - x[i])
}
return(x)
})))))
library(ggplot2)
conn <- file("Day13Input.txt", open = "r")
lines <-readLines(conn)
points <- data.frame()
folds <- data.frame()
for (line in lines) {
if (line != "") {
if (substr(line, 1, 1) != "f") {
point <- as.numeric(strsplit(line, split = ",")[[1]])
points <- rbind(points, point)
}
else {
split <- strsplit(line, split = "=")[[1]]
fold <- c(substr(split[1], nchar(split[1]), nchar(split[1])),
as.numeric(split[2]))
folds <- rbind(folds, fold)
}
}
}
names(points) <- c("x", "y")
names(folds) <- c("direction", "line")
close(conn)
for (i in 1:nrow(folds)) {
direction <- folds[i,]$direction
line <- as.numeric(folds[i,]$line)
points <- unique(t(apply(points, MARGIN = 1, function(x) {
if (direction == "x") { i <- 1 }
else {i <- 2}
if (x[i] > line) {
x[i] <- x[i] - 2 * abs(line - x[i])
}
return(x)
})))
}
points <- as.data.frame(points)
ggplot(points, aes(x = x, y = y)) +
geom_point(size = 5) +
ylim(max(points$y), 0)
ggplot(points, aes(x = x, y = y)) +
geom_point(size = 5) +
ylim(max(points$y), 0) +
theme_minimal()
max(points$y)
max(points$x)
library(ggplot2)
conn <- file("Day13Input.txt", open = "r")
lines <-readLines(conn)
points <- data.frame()
folds <- data.frame()
for (line in lines) {
if (line != "") {
if (substr(line, 1, 1) != "f") {
point <- as.numeric(strsplit(line, split = ",")[[1]])
points <- rbind(points, point)
}
else {
split <- strsplit(line, split = "=")[[1]]
fold <- c(substr(split[1], nchar(split[1]), nchar(split[1])),
as.numeric(split[2]))
folds <- rbind(folds, fold)
}
}
}
names(points) <- c("x", "y")
names(folds) <- c("direction", "line")
close(conn)
for (i in 1:nrow(folds)) {
direction <- folds[i,]$direction
line <- as.numeric(folds[i,]$line)
points <- unique(t(apply(points, MARGIN = 1, function(x) {
if (direction == "x") { i <- 1 }
else {i <- 2}
if (x[i] > line) {
x[i] <- x[i] - 2 * abs(line - x[i])
}
return(x)
})))
}
points <- as.data.frame(points)
ggplot(points, aes(x = x, y = y)) +
geom_point(size = 5) +
ylim(max(points$y), 0) +
theme_minimal()
library(igraph)
library(tidyverse)
input <- read.csv("Day12Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(t(apply(input, MARGIN = 1, function(x) {
(strsplit(x, split = "-")[[1]])
})))
input <- filter(rbind(input, as.data.frame(t(apply(input, MARGIN = 1, function(x) {
new_row <- c(x[2], x[1])
names(new_row) <- c("V1", "V2")
return(new_row)
})))), V1 != "end", V2 != "start")
all_nodes <- unique(as.vector(t(input)))
remove <- c()
for (node in all_nodes){
if (node != "start" & node != "end" & node == tolower(node)) {
to_nodes <- filter(input, V1 == node)$V2
to_nodes <- to_nodes[!(to_nodes %in% c("start", "end"))]
if (all(to_nodes == tolower(to_nodes))) {
remove <- c(remove, node)
}
}
}
input <- filter(input, !(V1 %in% remove), !(V2 %in% remove))
# g <- graph(as.vector(t(input)), directed = FALSE)
# plot(g)
n_paths <<- 0
find_paths <- function(node, path) {
path <- c(path, node)
to_nodes <- filter(input, V1 == node)$V2
if ("end" %in% to_nodes & to_nodes[length(to_nodes)] != "end") {
i <- which(to_nodes == "end")
to_nodes <- c(to_nodes[-i], to_nodes[i])
}
for (to in to_nodes) {
if (to != "end") {
if (!(to %in% path) | to == toupper(to)) {
find_paths(to, path)
}
}
else {
path <- c()
n_paths <<- n_paths + 1
return(1)
}
}
}
find_paths("start", c())
print(n_paths)
setwd("C:/Users/lesch/Dropbox/School 2021-2022 (SLU)/Fall 2021/AdventOfCode/AdventOfCode2021/Day12")
library(igraph)
library(tidyverse)
input <- read.csv("Day12Input.txt", header = FALSE, colClasses = c("character"))
input <- as.data.frame(t(apply(input, MARGIN = 1, function(x) {
(strsplit(x, split = "-")[[1]])
})))
input <- filter(rbind(input, as.data.frame(t(apply(input, MARGIN = 1, function(x) {
new_row <- c(x[2], x[1])
names(new_row) <- c("V1", "V2")
return(new_row)
})))), V1 != "end", V2 != "start")
all_nodes <- unique(as.vector(t(input)))
remove <- c()
for (node in all_nodes){
if (node != "start" & node != "end" & node == tolower(node)) {
to_nodes <- filter(input, V1 == node)$V2
to_nodes <- to_nodes[!(to_nodes %in% c("start", "end"))]
if (all(to_nodes == tolower(to_nodes))) {
remove <- c(remove, node)
}
}
}
input <- filter(input, !(V1 %in% remove), !(V2 %in% remove))
# g <- graph(as.vector(t(input)), directed = FALSE)
# plot(g)
n_paths <<- 0
find_paths <- function(node, path) {
path <- c(path, node)
to_nodes <- filter(input, V1 == node)$V2
if ("end" %in% to_nodes & to_nodes[length(to_nodes)] != "end") {
i <- which(to_nodes == "end")
to_nodes <- c(to_nodes[-i], to_nodes[i])
}
for (to in to_nodes) {
if (to != "end") {
if (!(to %in% path) | to == toupper(to)) {
find_paths(to, path)
}
}
else {
path <- c()
n_paths <<- n_paths + 1
return(1)
}
}
}
find_paths("start", c())
print(n_paths)
